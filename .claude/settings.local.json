{
  "permissions": {
    "allow": [
      "Bash(pdfunite:*)",
      "Bash(01_linear_pipeline.pdf )",
      "Bash(02_component_architecture.pdf )",
      "Bash(01_enqueue_to_playback.pdf )",
      "Bash(02_event_driven_architecture.pdf )",
      "Bash(03_buffer_lifecycle.pdf )",
      "Bash(04_decoder_pause_resume.pdf )",
      "Bash(05_mixer_modes.pdf )",
      "Bash(03_parameter_mapping.pdf )",
      "Bash(04_configuration_flow.pdf )",
      "Bash(GUIDE003_audio_pipeline_diagrams_COMPLETE.pdf)",
      "Bash(RUST_LOG=info target/debug/wkmp-ap:*)",
      "SlashCommand(/think wip/_user_story.md)",
      "Bash(git reset:*)",
      "Bash(cargo build:*)",
      "Bash(timeout 5 cargo run:*)",
      "Read(//tmp/**)",
      "Bash(bash:*)",
      "Bash(cat:*)",
      "Bash(curl:*)",
      "Bash(pkill:*)",
      "Bash(pgrep:*)",
      "Bash(sqlite3:*)",
      "Bash(killall:*)",
      "Bash(cargo test:*)",
      "Bash(chmod:*)",
      "Bash(git checkout:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(awk:*)",
      "SlashCommand(/plan:*)",
      "Bash(cargo search:*)",
      "WebSearch",
      "Bash(find:*)",
      "Bash(RUST_LOG=info timeout 5 cargo run:*)",
      "Read(//home/sw/Music/**)",
      "Bash(for f in wkmp-ap/src/**/*.rs)",
      "Bash(do if [ -f \"$f\" ])",
      "Bash(then awk '/^    pub fn|^    fn|^pub fn|^fn / {fname=$0; line=NR; count=0} \n         /\\{/ {count++} \n         /\\}/ {count--; if(count==0 && fname!=\"\"\"\"\"\"\"\") {len=NR-line; if(len>200) print FILENAME\"\"\"\":\"\"\"\"line\"\"\"\":\"\"\"\"fname\"\"\"\" (\"\"\"\"len\"\"\"\" lines)\"\"\"\"}}' \"$f\" fi done)",
      "Bash(cargo fix:*)",
      "Bash(git rev-parse:*)",
      "Bash(git fetch:*)",
      "Bash(git rev-list:*)",
      "Bash(git branch:*)",
      "Bash(git stash:*)",
      "Bash(git push:*)",
      "Bash(timeout 60 cargo test:*)",
      "Bash(grep:*)",
      "Bash(1)",
      "Bash(timeout 3 cargo run:*)",
      "Bash(timeout 3 target/debug/wkmp-ai:*)",
      "SlashCommand(/think What causes UI hang during re-scan of partially imported folder? Where in SCANNING phase does database deduplication check occur without progress updates? What progress indicators should be added for common re-scan maintenance scenario?)",
      "Bash(cargo check:*)",
      "Bash(timeout 60 cargo check:*)",
      "Bash(rustc:*)",
      "Bash(where clang:*)",
      "Bash(dir \"C:\\Program Files\\LLVM\")",
      "Read(//c/Program Files/Microsoft Visual Studio/**)",
      "Bash(clang --version:*)",
      "Read(//c/Program Files/**)",
      "Bash(export LIBCLANG_PATH=\"C:\\Program Files\\LLVM\\bin\")",
      "Bash(\"C:\\Program Files\\LLVM\\bin\\clang.exe\" --version)",
      "Bash(export LIBCLANG_PATH=\"C:/Program Files/LLVM/bin\")",
      "Bash(RUST_LOG=info cargo run:*)",
      "Read(//home/sw/.config/**)",
      "SlashCommand(/think wip/_toml_directory_creation.md)",
      "Bash(RUST_LOG=info timeout 10 cargo run:*)",
      "WebFetch(domain:acoustid.org)",
      "Bash(python3:*)",
      "Bash(cargo info:*)",
      "WebFetch(domain:docs.rs)",
      "Read(//home/sw/.cargo/registry/src/**)",
      "SlashCommand(/think:*)",
      "Bash(cargo clean:*)"
    ],
    "deny": [],
    "ask": []
  }
}
