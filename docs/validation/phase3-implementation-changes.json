{
  "metadata": {
    "generated_date": "2025-10-19",
    "agent": "Agent 7B: Edit Plan Generator",
    "phase": "Phase 3 - Implementation Change Tracking",
    "purpose": "Track which edits require code implementation changes vs documentation-only",
    "total_edits": 137,
    "documentation_only": 132,
    "implementation_required": 5
  },

  "summary": {
    "by_impact": {
      "NONE": {
        "count": 132,
        "description": "Documentation-only changes, no code modifications needed",
        "execution_priority": "IMMEDIATE",
        "risk": "MINIMAL"
      },
      "MINOR": {
        "count": 3,
        "description": "Verification of current implementation behavior required",
        "execution_priority": "SOON",
        "risk": "LOW"
      },
      "MAJOR": {
        "count": 2,
        "description": "Significant code changes required",
        "execution_priority": "PLANNED",
        "risk": "HIGH"
      }
    },

    "code_changes_required": {
      "serial_decode_migration": {
        "severity": "MAJOR",
        "files_affected": 3,
        "lines_of_code_estimate": "200-400 LOC modified",
        "testing_required": "Comprehensive playback testing, cache performance validation",
        "blocked_by_tier1": false
      },
      "tick_based_database": {
        "severity": "MAJOR",
        "files_affected": 15,
        "lines_of_code_estimate": "500-800 LOC modified",
        "testing_required": "Database migration testing, data integrity validation, API compatibility",
        "blocked_by_tier1": true
      },
      "fade_timing_verification": {
        "severity": "MINOR",
        "files_affected": 2,
        "lines_of_code_estimate": "0-100 LOC (depends on current implementation)",
        "testing_required": "Audio quality validation, performance testing",
        "blocked_by_tier1": false
      }
    }
  },

  "implementation_changes": [
    {
      "change_id": "IMPL-001",
      "title": "Serial Decode Execution Migration",
      "severity": "MAJOR",
      "triggered_by_edits": ["EDIT-SPEC014-001", "EDIT-SPEC013-011"],
      "blocked_by": null,
      "blocked_by_tier1": false,

      "current_state": {
        "description": "2-thread parallel decoder pool",
        "location": "wkmp-ap/src/playback/pipeline/single_stream/decoder.rs",
        "specification": "SPEC014 SSD-DEC-030: Fixed pool of 2 decoder threads"
      },

      "target_state": {
        "description": "Serial decode execution with priority-based switching",
        "specification": "SPEC016 DBD-DEC-040: One decoder at a time for improved cache coherency",
        "benefits": [
          "Improved CPU cache coherency",
          "Reduced maximum processor load",
          "Avoids cooling fan spin-up on resource-constrained devices",
          "Simpler decode scheduling logic",
          "Lower power consumption"
        ]
      },

      "files_to_modify": [
        {
          "path": "wkmp-ap/src/playback/pipeline/single_stream/decoder.rs",
          "estimated_loc": "150-250 LOC modified",
          "changes": [
            "Replace thread pool with single decoder thread",
            "Implement priority queue for decode jobs",
            "Add priority-based job switching logic",
            "Remove parallel decode synchronization"
          ]
        },
        {
          "path": "wkmp-ap/src/playback/pipeline/single_stream/buffer.rs",
          "estimated_loc": "30-80 LOC modified",
          "changes": [
            "Update buffer manager to work with serial decoder",
            "Adjust decode request queueing"
          ]
        },
        {
          "path": "wkmp-ap/src/playback/pipeline/single_stream/mod.rs",
          "estimated_loc": "20-50 LOC modified",
          "changes": [
            "Update initialization for serial decoder",
            "Adjust component wiring"
          ]
        }
      ],

      "testing_requirements": {
        "unit_tests": [
          "Test priority queue ordering (Immediate > Next > Prefetch)",
          "Test decode job completion handling",
          "Test priority changes during decode"
        ],
        "integration_tests": [
          "Test queue playback with serial decode",
          "Test skip-ahead behavior",
          "Test decode cancellation on queue changes"
        ],
        "performance_tests": [
          "Measure CPU cache hit rate (before/after)",
          "Measure maximum CPU load during decode",
          "Measure power consumption",
          "Verify no increase in decode latency"
        ],
        "regression_tests": [
          "Verify crossfade timing unchanged",
          "Verify buffer fill timing unchanged",
          "Verify sample-accurate positioning maintained"
        ]
      },

      "migration_steps": [
        "1. Create feature flag: serial_decode (default: false)",
        "2. Implement serial decoder alongside existing pool",
        "3. Add comprehensive tests for serial decoder",
        "4. Validate performance improvements in testing",
        "5. Enable serial_decode by default (A/B test period)",
        "6. Remove old parallel decoder code after validation",
        "7. Update configuration documentation"
      ],

      "rollback_plan": "Feature flag allows instant rollback to parallel decoder if issues found",

      "estimated_effort": "3-5 developer days",
      "risk_level": "MEDIUM-HIGH",
      "priority": "MEDIUM (performance optimization, not critical bug fix)"
    },

    {
      "change_id": "IMPL-002",
      "title": "Tick-Based Database Storage Migration",
      "severity": "MAJOR",
      "triggered_by_edits": ["EDIT-IMPL001-001", "EDIT-SPEC002-003", "EDIT-SPEC002-007", "EDIT-SPEC002-008"],
      "blocked_by": "T1-TIMING-001",
      "blocked_by_tier1": true,

      "current_state": {
        "description": "Timing fields stored as REAL seconds in passages table",
        "location": "migrations/*, common/src/models/passage.rs",
        "specification": "IMPL001 passages table: start_time, fade_in_start, lead_in_start, etc. (REAL)"
      },

      "target_state": {
        "description": "Timing fields stored as INTEGER ticks (28,224,000 ticks/second)",
        "specification": "SPEC017 SRC-DB-011 through SRC-DB-016: *_ticks fields (INTEGER)",
        "benefits": [
          "Eliminates floating-point cumulative rounding errors",
          "Lossless timing precision (~35.4 nanoseconds per tick)",
          "Consistent with SPEC017 tick-based timing system",
          "Integer arithmetic faster than floating-point"
        ]
      },

      "files_to_modify": [
        {
          "path": "migrations/00XX_tick_based_timing.sql",
          "estimated_loc": "50-100 LOC (new migration)",
          "changes": [
            "ALTER TABLE passages: Rename/convert timing fields to *_ticks",
            "Data migration: seconds * 28224000 -> ticks",
            "Add indexes on new tick fields",
            "Drop old REAL second fields"
          ]
        },
        {
          "path": "common/src/models/passage.rs",
          "estimated_loc": "80-120 LOC modified",
          "changes": [
            "Update Passage struct fields: start_time_ticks (i64) instead of start_time (f64)",
            "Add conversion methods: from_seconds(), to_seconds(), from_ms(), to_ms()",
            "Update serialization/deserialization for API compatibility"
          ]
        },
        {
          "path": "common/src/models/queue_entry.rs",
          "estimated_loc": "40-60 LOC modified",
          "changes": [
            "Update QueueEntry timing fields to i64 ticks",
            "Add tick conversion for API responses"
          ]
        },
        {
          "path": "wkmp-ap/src/playback/pipeline/single_stream/*.rs",
          "estimated_loc": "150-250 LOC modified",
          "changes": [
            "Update all timing calculations to use i64 ticks",
            "Replace f64 seconds with i64 ticks in buffers, mixer, decoder",
            "Add tick-to-sample conversion at decoder-buffer boundary"
          ]
        },
        {
          "path": "wkmp-ap/src/api/*.rs",
          "estimated_loc": "60-100 LOC modified",
          "changes": [
            "Add millisecond ↔ tick conversion layer",
            "Update API request/response handling",
            "Maintain backward compatibility (accept ms, return ms)"
          ]
        },
        {
          "path": "wkmp-pd/src/selection/*.rs",
          "estimated_loc": "40-60 LOC modified",
          "changes": [
            "Update passage selection to use tick-based timing",
            "Update cooldown calculations"
          ]
        },
        {
          "path": "wkmp-ui/src/components/passage_editor/*.tsx",
          "estimated_loc": "50-80 LOC modified",
          "changes": [
            "Update UI to display/edit timing in seconds/milliseconds",
            "Add conversion when communicating with API"
          ]
        }
      ],

      "testing_requirements": {
        "migration_tests": [
          "Test migration script on production-like data",
          "Verify data integrity: tick values match original seconds",
          "Test rollback migration (ticks -> seconds)",
          "Test migration performance (large databases)"
        ],
        "unit_tests": [
          "Test tick ↔ second conversion accuracy",
          "Test tick ↔ millisecond conversion for API",
          "Test tick arithmetic (no overflow for reasonable values)",
          "Test edge cases (0 ticks, very large values)"
        ],
        "integration_tests": [
          "Test passage playback with tick-based timing",
          "Test crossfade timing accuracy (sample-accurate)",
          "Test queue entry timing calculations",
          "Test API request/response format (ms in, ms out)"
        ],
        "regression_tests": [
          "Verify existing passages play correctly after migration",
          "Verify crossfade timing unchanged (to sample accuracy)",
          "Verify UI displays correct timing values",
          "Verify API compatibility maintained"
        ]
      },

      "migration_steps": [
        "1. TIER 1 APPROVAL: Obtain approval for schema change",
        "2. Create migration script: 00XX_tick_based_timing.sql",
        "3. Test migration on development database",
        "4. Update Passage model struct (i64 ticks)",
        "5. Add conversion methods (ticks ↔ seconds, ticks ↔ ms)",
        "6. Update playback engine to use ticks",
        "7. Add API conversion layer (ms ↔ ticks)",
        "8. Update UI to use millisecond display",
        "9. Comprehensive testing (migration, playback, API, UI)",
        "10. Backup production database",
        "11. Run migration on production",
        "12. Validate production data integrity",
        "13. Monitor for issues (rollback plan ready)"
      ],

      "rollback_plan": {
        "description": "Reverse migration available (ticks -> seconds)",
        "steps": [
          "1. Stop application",
          "2. Run reverse migration: ticks / 28224000 -> seconds",
          "3. Restore previous application version",
          "4. Restart application",
          "5. Verify playback correctness"
        ],
        "data_loss_risk": "NONE (reversible conversion)"
      },

      "estimated_effort": "7-10 developer days (including testing and validation)",
      "risk_level": "HIGH (database schema change, affects all timing)",
      "priority": "HIGH (eliminates precision errors, required by SPEC017)",
      "prerequisite": "TIER 1 APPROVAL (T1-TIMING-001)"
    },

    {
      "change_id": "IMPL-003",
      "title": "Verify Fade Application Timing",
      "severity": "MINOR",
      "triggered_by_edits": ["EDIT-SPEC014-002"],
      "blocked_by": null,
      "blocked_by_tier1": false,

      "current_state": {
        "description": "Unknown: Fades may be applied on-read (per-sample) or pre-buffer (during decode)",
        "location": "wkmp-ap/src/playback/pipeline/single_stream/buffer.rs",
        "specification": "SPEC013 SSP-BUF-020: 'Automatic fade application during read_sample()' (on-read)"
      },

      "target_state": {
        "description": "Fades applied before buffering (pre-buffer) during decode",
        "specification": "SPEC016 DBD-FADE-030: Pre-buffer fade application",
        "benefits": [
          "Pre-computed fades eliminate per-sample multiplication during playback",
          "Reduced CPU overhead in real-time audio path",
          "Fade parameters become immutable after buffering (simpler lifecycle)",
          "Better cache utilization (fade-modified samples buffered sequentially)"
        ]
      },

      "verification_steps": [
        "1. Review current fade application code in buffer.rs",
        "2. Check if fade curves applied during decode (pre-buffer) or during read_sample() (on-read)",
        "3. If pre-buffer: No changes needed (already matches SPEC016)",
        "4. If on-read: Consider migration to pre-buffer for performance"
      ],

      "files_to_review": [
        {
          "path": "wkmp-ap/src/playback/pipeline/single_stream/buffer.rs",
          "review_focus": [
            "PassageBuffer::read_sample() - Check if fade applied here (on-read)",
            "Decoder fill logic - Check if fade applied during decode (pre-buffer)",
            "Fade curve storage - Check if mutable or immutable after buffer creation"
          ]
        },
        {
          "path": "wkmp-ap/src/playback/pipeline/single_stream/decoder.rs",
          "review_focus": [
            "Decode loop - Check if fade handler called during decode",
            "Buffer write logic - Check if samples already faded"
          ]
        }
      ],

      "conditional_implementation": {
        "condition": "IF current implementation uses on-read fade application",
        "files_to_modify": [
          {
            "path": "wkmp-ap/src/playback/pipeline/single_stream/decoder.rs",
            "estimated_loc": "40-80 LOC modified",
            "changes": [
              "Add fade curve application during decode loop",
              "Apply fade-in curve to samples before start",
              "Apply pass-through (no fade) to middle samples",
              "Apply fade-out curve to samples at end"
            ]
          },
          {
            "path": "wkmp-ap/src/playback/pipeline/single_stream/buffer.rs",
            "estimated_loc": "20-40 LOC removed",
            "changes": [
              "Remove fade application from read_sample()",
              "Make fade parameters immutable after buffer creation",
              "Simplify buffer read path (no per-sample multiplication)"
            ]
          }
        ],

        "testing_requirements": {
          "audio_quality_tests": [
            "Verify fade curves sound identical (pre-buffer vs on-read)",
            "Test all 5 fade curve types",
            "Test edge cases (very short passages, immediate crossfades)"
          ],
          "performance_tests": [
            "Measure CPU usage during playback (should decrease)",
            "Measure mixer loop latency (should improve)",
            "Verify no increase in decode time"
          ]
        },

        "migration_effort": "1-2 developer days (if migration needed)",
        "risk": "MEDIUM (audio quality regression possible)"
      },

      "estimated_effort": "0.5 days verification + 0-2 days implementation (if needed)",
      "risk_level": "LOW-MEDIUM",
      "priority": "LOW (performance optimization, not critical)"
    }
  ],

  "documentation_only_edits": {
    "count": 132,
    "description": "These edits require no code changes, only documentation updates",
    "execution_strategy": "Can be executed immediately with automated tooling or manual editing",
    "risk": "MINIMAL",

    "categories": [
      {
        "category": "ADD_REFERENCE",
        "count": 68,
        "description": "Add cross-references to SPEC016/SPEC017",
        "examples": [
          "EDIT-SPEC014-010: Add SPEC016/SPEC017 to related documentation",
          "EDIT-SPEC013-002: Add SPEC016/SPEC017 to related documentation",
          "EDIT-SPEC002-001: Reference SPEC016 mixer implementation"
        ]
      },
      {
        "category": "REMOVE_REDUNDANCY",
        "count": 23,
        "description": "Replace duplicated content with deep links",
        "examples": [
          "EDIT-SPEC014-003: Replace decode-and-skip description with link to SPEC016",
          "EDIT-SPEC014-005: Replace buffer memory calculation with link to DBD-PARAM-070",
          "EDIT-SPEC013-004: Replace buffer details with link to SPEC016"
        ]
      },
      {
        "category": "ADD_DEPRECATION",
        "count": 4,
        "description": "Mark old sections as superseded by SPEC016/SPEC017",
        "examples": [
          "EDIT-SPEC013-001: Add note that SPEC016 is authoritative",
          "EDIT-SPEC013-005: Note SPEC016 is authoritative for mixer",
          "EDIT-SPEC013-011: Note SPEC016 specifies serial decode"
        ]
      },
      {
        "category": "CLARIFY_PARAMETER",
        "count": 3,
        "description": "Resolve parameter confusion and ambiguity",
        "examples": [
          "EDIT-SPEC016-003: Clarify maximum_decode_streams is buffer limit, not thread count",
          "EDIT-SPEC014-011: Clarify decoder threads (2) vs decode streams (12)"
        ]
      },
      {
        "category": "ADD_GLOSSARY",
        "count": 1,
        "description": "Add terminology alignment",
        "examples": [
          "EDIT-SPEC016-007: Add glossary mapping decoder-buffer chain to PassageBuffer/ManagedBuffer"
        ]
      },
      {
        "category": "ADD_CLARIFICATION",
        "count": 2,
        "description": "Clarify logical vs physical architecture",
        "examples": [
          "EDIT-SPEC016-005: Clarify logical processing pipeline vs physical components",
          "EDIT-SPEC016-009: Clarify periodic wake vs blocking timer"
        ]
      },
      {
        "category": "ADD_CROSS_REFERENCE",
        "count": 4,
        "description": "Bidirectional references between specs",
        "examples": [
          "EDIT-SPEC016-012: SPEC016 mixer references SPEC002 timing calculation",
          "EDIT-SPEC016-011: SPEC016 fade handler references SPEC002 fade curves"
        ]
      }
    ]
  },

  "execution_timeline": {
    "phase_3a_immediate": {
      "description": "Execute documentation-only edits (132 edits)",
      "timeline": "Immediate execution possible",
      "effort": "1-2 developer days (with automation) or 3-4 days (manual)",
      "risk": "MINIMAL",
      "blockers": "None",
      "deliverable": "Updated documentation with SPEC016/SPEC017 cross-references"
    },

    "phase_3b_verification": {
      "description": "Verify current implementation behaviors (3 MINOR changes)",
      "timeline": "1-2 weeks after Phase 3A",
      "effort": "0.5-1 developer day",
      "risk": "LOW",
      "blockers": "Phase 3A completion (for documentation context)",
      "deliverable": "Verification report: current state vs SPEC016 design"
    },

    "phase_3c_tier1_approval": {
      "description": "Obtain Tier 1 approval for tick-based storage",
      "timeline": "Parallel with Phase 3A/3B (approval process independent)",
      "effort": "2-3 developer days (prepare justification, present, respond to feedback)",
      "risk": "MEDIUM (approval may require design discussion)",
      "blockers": "None (can start immediately)",
      "deliverable": "Tier 1 approval for T1-TIMING-001"
    },

    "phase_3d_implementation": {
      "description": "Execute code implementation changes (2 MAJOR changes)",
      "timeline": "After Phase 3A/3B/3C completion",
      "effort": "10-15 developer days total",
      "risk": "HIGH",
      "blockers": [
        "Phase 3A: Documentation context",
        "Phase 3B: Verification results",
        "Phase 3C: Tier 1 approval (for tick-based storage only)"
      ],
      "deliverable": "Serial decode implementation, tick-based database migration"
    }
  },

  "critical_path": {
    "description": "Longest sequence of dependent tasks",
    "timeline": "3-4 weeks total",
    "tasks_in_order": [
      {
        "task": "Phase 3A: Execute documentation-only edits",
        "duration": "1-2 days",
        "blockers": "None",
        "parallel_with": ["Phase 3C: Tier 1 approval process"]
      },
      {
        "task": "Phase 3B: Verify implementation behaviors",
        "duration": "0.5-1 day",
        "blockers": ["Phase 3A complete"],
        "parallel_with": ["Phase 3C: Tier 1 approval process"]
      },
      {
        "task": "Phase 3C: Obtain Tier 1 approval",
        "duration": "1-2 weeks (depends on approval process)",
        "blockers": "None",
        "parallel_with": ["Phase 3A", "Phase 3B"]
      },
      {
        "task": "IMPL-002: Tick-based database migration",
        "duration": "7-10 days",
        "blockers": ["Phase 3A", "Phase 3B", "Phase 3C Tier 1 approval"],
        "parallel_with": []
      },
      {
        "task": "IMPL-001: Serial decode migration",
        "duration": "3-5 days",
        "blockers": ["Phase 3A", "Phase 3B"],
        "parallel_with": ["IMPL-002 (can overlap)"]
      }
    ]
  },

  "risk_mitigation": {
    "documentation_edits": {
      "risk": "Broken links or incorrect requirement IDs",
      "mitigation": [
        "Automated link validation after edits",
        "Requirement ID cross-reference check",
        "Manual review of high-priority edits"
      ]
    },

    "serial_decode_migration": {
      "risk": "Performance regression or playback issues",
      "mitigation": [
        "Feature flag for instant rollback",
        "Comprehensive performance testing",
        "A/B testing period before removing old code",
        "Keep parallel decoder code until validation complete"
      ]
    },

    "tick_based_database": {
      "risk": "Data loss or corruption during migration",
      "mitigation": [
        "Full database backup before migration",
        "Test migration on production-like data",
        "Reverse migration script ready",
        "Validation queries to check data integrity",
        "Staged rollout (test environment → staging → production)"
      ]
    },

    "fade_timing_change": {
      "risk": "Audio quality regression",
      "mitigation": [
        "Extensive audio quality testing",
        "A/B comparison (before/after recordings)",
        "Feature flag for rollback if needed",
        "User acceptance testing period"
      ]
    }
  }
}
