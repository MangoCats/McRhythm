{
  "metadata": {
    "generated_date": "2025-10-19",
    "agent": "SPEC016/SPEC017 Concept Cataloger",
    "documents_analyzed": [
      "docs/SPEC016-decoder_buffer_design.md",
      "docs/SPEC017-sample_rate_conversion.md"
    ],
    "total_requirement_ids": 99,
    "dbd_ids_count": 52,
    "src_ids_count": 47
  },

  "requirement_ids": {
    "DBD": {
      "DBD-SC-010": {
        "line": 13,
        "text": "The concepts described herein apply primarily to the wkmp-ap Audio Player microservice.",
        "category": "Scope"
      },
      "DBD-OV-010": {
        "line": 17,
        "text": "The Audio Player plays audio from source files that are encoded, often compressed. The audio is decoded, converted to the working_sample_rate when necessary, and buffered for playback as uncompressed stereo sample values.",
        "category": "Overview"
      },
      "DBD-OV-020": {
        "line": 19,
        "text": "Separate buffers are created for each [ENT-MP-030] passage.",
        "category": "Overview"
      },
      "DBD-OV-030": {
        "line": 21,
        "text": "The playback system reads audio from the buffers, applies [REQ-CTL-040] volume, [XFD-OV-010] crossfade and [REQ-XFD-030] other amplitude modifications before sending the final computed stereo audio sample levels to the [SSP-OUT-010] output system.",
        "category": "Overview"
      },
      "DBD-OV-040": {
        "line": 23,
        "text": "A simplified view of the audio processing chain is: [mermaid diagram]",
        "category": "Overview"
      },
      "DBD-OV-050": {
        "line": 60,
        "text": "The system allocates maximum_decode_streams decoder-buffer chains. Each chain is assigned 1:1 to a passage in the queue, when the passage is maximum_decode_streams or less from the first position in the queue.",
        "category": "Overview"
      },
      "DBD-OV-060": {
        "line": 62,
        "text": "The first position in the queue is also referred to as the 'now playing' passage.",
        "category": "Overview"
      },
      "DBD-OV-070": {
        "line": 64,
        "text": "The next position in the queue is also referred to as the 'playing next' passage.",
        "category": "Overview"
      },
      "DBD-OV-080": {
        "line": 66,
        "text": "Note that each decoder-buffer chain is NOT associated with a particular position in the queue. Each decoder-buffer chain is assigned to a passage in the queue and remains associated with that passage as the passage advances toward the now playing queue position.",
        "category": "Overview"
      },
      "DBD-REL-010": {
        "line": 71,
        "text": "These documents define essential terms and concepts described herein. Please also read and understand these documents before taking action based on this document: [lists SPEC002, REQ002, SPEC017]",
        "category": "Related Documents"
      },
      "DBD-PARAM-010": {
        "line": 78,
        "text": "These defined values are stored in the global settings table of the database, where they are read once at startup for run-time use. Changes of operating parameters' values may require a complete system restart for proper operation.",
        "category": "Operating Parameters"
      },
      "DBD-PARAM-020": {
        "line": 82,
        "text": "The sample rate that all decoded audio is converted to before buffering. Default value: 44100Hz. Behavior: When audio comes out of the decoder at the working_sample_rate, the sample rate conversion process shall be bypassed",
        "category": "Operating Parameters",
        "parameter_name": "working_sample_rate",
        "default_value": "44100",
        "units": "Hz"
      },
      "DBD-PARAM-030": {
        "line": 89,
        "text": "The maximum number of (stereo) samples that the output ring buffer (between the mixer and the output) can contain. Default value: 8192 samples. Equivalent: 185ms of audio at 44.1kHz",
        "category": "Operating Parameters",
        "parameter_name": "output_ringbuffer_size",
        "default_value": "8192",
        "units": "samples"
      },
      "DBD-PARAM-040": {
        "line": 96,
        "text": "The number of wall clock milliseconds between mixer checks of the output ring buffer state. Default value: 90ms. Behavior: Each output_refill_period the mixer passes enough (stereo) samples to fill the output ring buffer from the active decoder-buffer chain(s) and its mixer algorithms. Equivalent: Just under half of the output ring buffer capacity",
        "category": "Operating Parameters",
        "parameter_name": "output_refill_period",
        "default_value": "90",
        "units": "ms"
      },
      "DBD-PARAM-050": {
        "line": 104,
        "text": "The maximum number of audio decoders that will operate on passages in the queue. Default value: 12. Behavior: When the queue has more passages than this, only the passages closest to being played will be decoded into buffers awaiting play. Other passages will start decoding when they advance to within maximum_decode_streams of the 'now playing' first position in the queue",
        "category": "Operating Parameters",
        "parameter_name": "maximum_decode_streams",
        "default_value": "12",
        "units": "count"
      },
      "DBD-PARAM-060": {
        "line": 111,
        "text": "The number of wall clock milliseconds between decode job priority evaluation. Default value: 5000ms. Behavior: Once every decode_work_period the currently working decoder is paused and the list of pending decode jobs is evaluated to determine the highest priority job and switch to decoding it. Continuation: If the currently working decoder is still the highest priority job, then it continues. Completion: When a decoding job reaches the end of the passage, or receives a buffer full indication from the playout buffer it is filling, it pauses and the next highest priority decoding job is resumed immediately. Purpose: The decode_work_period serves to allow decodes to continue uninterrupted while still serving the highest priority jobs often enough to ensure their buffers do not run empty",
        "category": "Operating Parameters",
        "parameter_name": "decode_work_period",
        "default_value": "5000",
        "units": "ms"
      },
      "DBD-PARAM-070": {
        "line": 121,
        "text": "The number of (stereo) samples that the decoded / resampled audio buffers contain. Default value: 661941 samples. Equivalent: 15.01 seconds of audio at 44.1kHz. Memory: At 8 bytes per sample, with 12 playout buffers total, that's 60MB of playout buffer",
        "category": "Operating Parameters",
        "parameter_name": "playout_ringbuffer_size",
        "default_value": "661941",
        "units": "samples"
      },
      "DBD-PARAM-080": {
        "line": 129,
        "text": "The number of (stereo) samples that the buffer reserves to handle additional samples that may arrive from the resampler after the decoder pauses due to a buffer full condition. Default value: 441 samples. Equivalent: 0.01 seconds of audio at 44.1kHz",
        "category": "Operating Parameters",
        "parameter_name": "playout_ringbuffer_headroom",
        "default_value": "441",
        "units": "samples"
      },
      "DBD-PARAM-090": {
        "line": 136,
        "text": "When in pause mode, instead of playing samples from the decoder-buffer chain(s), the mixer starts at the last played (stereo) sample values and recursively multiplies them by this pause_decay_factor at every subsequent sample. Default value: 0.96875 (31/32). Purpose: Creates an exponential decay to zero, hopefully reducing audible 'pop' from the sudden stop of going to pause mode",
        "category": "Operating Parameters",
        "parameter_name": "pause_decay_factor",
        "default_value": "0.96875",
        "units": "ratio"
      },
      "DBD-PARAM-100": {
        "line": 143,
        "text": "When the absolute value of the pause mode output sample values drop below this pause_decay_floor, the mixer no longer bothers doing the multiplication and simply outputs 0.0. Default value: 0.0001778",
        "category": "Operating Parameters",
        "parameter_name": "pause_decay_floor",
        "default_value": "0.0001778",
        "units": "amplitude"
      },
      "DBD-FLOW-010": {
        "line": 151,
        "text": "Playback has two modes: Playing and Paused.",
        "category": "Dataflow"
      },
      "DBD-FLOW-020": {
        "line": 153,
        "text": "When in playing mode, audio data is fed from the buffers to the mixer and then to the output system via the output ringbuffer.",
        "category": "Dataflow"
      },
      "DBD-FLOW-030": {
        "line": 155,
        "text": "When paused, the mixer outputs silence to the output ringbuffer: a flat line, and no samples are consumed from the buffers.",
        "category": "Dataflow"
      },
      "DBD-FLOW-040": {
        "line": 157,
        "text": "When no samples are consumed from the buffers, the buffers do not finish playing and so they are not removed from the queue.",
        "category": "Dataflow"
      },
      "DBD-FLOW-050": {
        "line": 159,
        "text": "When in Playing mode, the mixer operates on samples from one or more buffers, calculating values to pass to the output ring buffer.",
        "category": "Dataflow"
      },
      "DBD-FLOW-060": {
        "line": 161,
        "text": "When the buffer associated with a passage in the queue reaches its end point, the passage is removed from the queue and the next passage in the queue either starts playing if there was no [XFD-OV-010] crossfade between them, or continues playing if it already started as a crossfade.",
        "category": "Dataflow"
      },
      "DBD-FLOW-100": {
        "line": 165,
        "text": "The wkmp-ap audio player is given passage definitions to enqueue via the API, either from the user interface, the program director, or other sources.",
        "category": "Dataflow"
      },
      "DBD-FLOW-110": {
        "line": 167,
        "text": "This queue of passage definitions is served in a First In First Out (FIFO) order for decoding and buffering.",
        "category": "Dataflow"
      },
      "DBD-DEC-010": {
        "line": 171,
        "text": "Each passage defines a portion of an audio file to play.",
        "category": "Decoders"
      },
      "DBD-DEC-020": {
        "line": 173,
        "text": "When a passage's position in the queue comes up within maximum_decode_streams of the first (now playing) position, an available decoder-buffer chain is assigned to it and it becomes eligible for decoding.",
        "category": "Decoders"
      },
      "DBD-DEC-030": {
        "line": 175,
        "text": "Each passage gets a dedicated decoder instance which works through the audio file, pausing when its buffer is full, resuming as data is read from the buffer into the mixer.",
        "category": "Decoders"
      },
      "DBD-DEC-040": {
        "line": 177,
        "text": "Decoding is handled serially in priority order, only one decode runs at a time to preserve cache coherency and reduce maximum processor loads, to avoid spinning up the cooling fans.",
        "category": "Decoders"
      },
      "DBD-DEC-050": {
        "line": 179,
        "text": "Decoding starts from the beginning of the audio file, even if the start point is after that.",
        "category": "Decoders"
      },
      "DBD-DEC-060": {
        "line": 181,
        "text": "Seek time estimation in compressed file decoding can be inaccurate, especially for variable bit rate encoded files.",
        "category": "Decoders"
      },
      "DBD-DEC-070": {
        "line": 183,
        "text": "Once the audio data has been decoded, it is 'exact sample accurate' repeatable and predictable.",
        "category": "Decoders"
      },
      "DBD-DEC-080": {
        "line": 185,
        "text": "Timing for passage start, end, fade in, fade out, lead in and lead out is all handled with exact sample accuracy for repeatability and predictability.",
        "category": "Decoders"
      },
      "DBD-RSMP-010": {
        "line": 189,
        "text": "When the audio data is not at the working_sample_rate, it is resampled to put it at the working_sample_rate before it is passed to the Fade In/Out handler.",
        "category": "Resampling"
      },
      "DBD-RSMP-020": {
        "line": 191,
        "text": "When the audio data is at the working_sample_rate, it is passed straight through from the Decoder to the Fade In/Out handler.",
        "category": "Resampling"
      },
      "DBD-FADE-010": {
        "line": 195,
        "text": "The Fade In/Out handler has several functions:",
        "category": "Fade In/Out handlers"
      },
      "DBD-FADE-020": {
        "line": 197,
        "text": "Samples received before the passage start time are discarded, not buffered.",
        "category": "Fade In/Out handlers"
      },
      "DBD-FADE-030": {
        "line": 199,
        "text": "When fade-in duration is > 0 then samples between the start time and the fade-in end point have the fade-in curve applied before they are buffered.",
        "category": "Fade In/Out handlers"
      },
      "DBD-FADE-040": {
        "line": 201,
        "text": "Through the passage until the fade-out start point samples are buffered exactly as they are received.",
        "category": "Fade In/Out handlers"
      },
      "DBD-FADE-050": {
        "line": 203,
        "text": "When fade-out duration is > 0 then samples between the fade-out point and the end time have the fade-out curve applied.",
        "category": "Fade In/Out handlers"
      },
      "DBD-FADE-060": {
        "line": 205,
        "text": "When the end time sample has been received by the Fade In/Out handler, the Decoder is informed that the passage is complete and no further decoding is needed.",
        "category": "Fade In/Out handlers"
      },
      "DBD-BUF-010": {
        "line": 209,
        "text": "The buffer of each decoder-buffer chain holds playout_ringbuffer_size stereo samples. As the parameter name implies, these are ring buffers.",
        "category": "Buffers"
      },
      "DBD-BUF-020": {
        "line": 211,
        "text": "The ring buffer starts empty when its processing chain is assigned to work with a particular passage.",
        "category": "Buffers"
      },
      "DBD-BUF-030": {
        "line": 213,
        "text": "Whenever the buffer is empty, the mixer cannot take samples out of it.",
        "category": "Buffers"
      },
      "DBD-BUF-040": {
        "line": 215,
        "text": "If the mixer does attempt to take a sample from an empty buffer, the buffer returns the same value that the last successful 'get next sample' call received along with a 'buffer empty' status informing the mixer of the situation.",
        "category": "Buffers"
      },
      "DBD-BUF-050": {
        "line": 217,
        "text": "Whenever the buffer has playout_ringbuffer_headroom or fewer samples of available free space (is nearly full), the decoder is told to pause decoding until more than playout_ringbuffer_headroom samples are available.",
        "category": "Buffers"
      },
      "DBD-BUF-060": {
        "line": 219,
        "text": "When the sample corresponding to the passage end time is removed from the buffer, the buffer informs the queue that passage playout has completed; the passage should now be removed from the queue.",
        "category": "Buffers"
      },
      "DBD-MIX-010": {
        "line": 223,
        "text": "The mixer implements several functions:",
        "category": "Mixer"
      },
      "DBD-MIX-020": {
        "line": 225,
        "text": "Every output_refill_period refills the output ring buffer for cpal to output.",
        "category": "Mixer"
      },
      "DBD-MIX-030": {
        "line": 227,
        "text": "Implements play and pause mode.",
        "category": "Mixer"
      },
      "DBD-MIX-040": {
        "line": 229,
        "text": "When in play mode: Takes samples from the 'now playing' passage buffer; When in a lead-out / lead-in crossfade, also takes samples from the 'playing next' passage buffer and adds them to the 'now playing' sample values; Multiplies the sample values by the master volume level; When 'fading in after pause' also multiplies the sample values by the current fade in curve value",
        "category": "Mixer"
      },
      "DBD-MIX-050": {
        "line": 235,
        "text": "When in pause mode, outputs near flatline silence: Takes the last (stereo) sample values and repeats them with an exponential decay toward zero by multiplying the values by the pause_decay_factor at each sample sent to the output ring buffer",
        "category": "Mixer"
      },
      "DBD-MIX-051": {
        "line": 237,
        "text": "This reduces the 'pop' effect that can occur from an instant transition to zero",
        "category": "Mixer"
      },
      "DBD-MIX-052": {
        "line": 238,
        "text": "Each entry to pause mode starts at the last playing mode (stereo) sample values and decays through the duration of the pause until the absolute value of the current sample value is less than the pause_decay_floor, at which point the mixer simply outputs zeroes",
        "category": "Mixer"
      },
      "DBD-OUT-010": {
        "line": 242,
        "text": "The mixer creates a single output stream which is fed to the output ring buffer for consumption by the cpal audio output library.",
        "category": "Output"
      },
      "DBD-FMT-010": {
        "line": 246,
        "text": "All stages from the decoder output to the mixer output work with stereo f32 sample values.",
        "category": "Sample Format"
      },
      "DBD-FMT-020": {
        "line": 248,
        "text": "This is the preferred format both for the symphonia decoder and for the cpal output handler.",
        "category": "Sample Format"
      }
    },
    "SRC": {
      "SRC-SC-010": {
        "line": 13,
        "text": "The concepts described herein apply to timing precision across all WKMP microservices that handle audio timing, passage boundaries, and crossfade calculations.",
        "category": "Scope"
      },
      "SRC-PROB-010": {
        "line": 17,
        "text": "Audio files exist at many different sample rates. WKMP requires sample-accurate timing precision for passage boundaries and crossfade points across all source sample rates.",
        "category": "Problem Statement"
      },
      "SRC-PROB-020": {
        "line": 19,
        "text": "Using floating-point seconds for timing introduces cumulative rounding errors that violate sample-accuracy requirements.",
        "category": "Problem Statement"
      },
      "SRC-PROB-030": {
        "line": 21,
        "text": "Using integer sample counts tied to a specific sample rate (e.g., 44.1kHz) creates conversion errors when working with files at other sample rates.",
        "category": "Problem Statement"
      },
      "SRC-PROB-040": {
        "line": 23,
        "text": "The system needs a universal time representation that can exactly express any sample boundary from any supported sample rate.",
        "category": "Problem Statement"
      },
      "SRC-SOL-010": {
        "line": 27,
        "text": "WKMP uses a tick-based timing system where one 'tick' represents a fixed fraction of a second.",
        "category": "Solution"
      },
      "SRC-SOL-020": {
        "line": 29,
        "text": "The tick rate is chosen as the Least Common Multiple (LCM) of all supported audio sample rates.",
        "category": "Solution"
      },
      "SRC-SOL-030": {
        "line": 31,
        "text": "This ensures that any sample boundary from any supported sample rate can be represented exactly as an integer number of ticks.",
        "category": "Solution"
      },
      "SRC-RATE-010": {
        "line": 35,
        "text": "WKMP supports these common audio sample rates:",
        "category": "Common Audio Sample Rates"
      },
      "SRC-RATE-011": {
        "line": 37,
        "text": "8,000 Hz (telephony, low-quality)",
        "category": "Sample Rates"
      },
      "SRC-RATE-012": {
        "line": 38,
        "text": "11,025 Hz (old multimedia, 1/4 CD quality)",
        "category": "Sample Rates"
      },
      "SRC-RATE-013": {
        "line": 39,
        "text": "16,000 Hz (wideband telephony)",
        "category": "Sample Rates"
      },
      "SRC-RATE-014": {
        "line": 40,
        "text": "22,050 Hz (half CD quality)",
        "category": "Sample Rates"
      },
      "SRC-RATE-015": {
        "line": 41,
        "text": "32,000 Hz (miniDV, NTSC DV)",
        "category": "Sample Rates"
      },
      "SRC-RATE-016": {
        "line": 42,
        "text": "44,100 Hz (CD audio, most common)",
        "category": "Sample Rates"
      },
      "SRC-RATE-017": {
        "line": 43,
        "text": "48,000 Hz (DAT, DVD, professional video)",
        "category": "Sample Rates"
      },
      "SRC-RATE-018": {
        "line": 44,
        "text": "88,200 Hz (high-res audio, 2× CD)",
        "category": "Sample Rates"
      },
      "SRC-RATE-019": {
        "line": 45,
        "text": "96,000 Hz (high-res audio, 2× DAT)",
        "category": "Sample Rates"
      },
      "SRC-RATE-020": {
        "line": 46,
        "text": "176,400 Hz (ultra high-res, 4× CD)",
        "category": "Sample Rates"
      },
      "SRC-RATE-021": {
        "line": 47,
        "text": "192,000 Hz (ultra high-res, 4× DAT)",
        "category": "Sample Rates"
      },
      "SRC-TICK-010": {
        "line": 51,
        "text": "The tick rate is the Least Common Multiple (LCM) of all supported sample rates: LCM(8000, 11025, 16000, 22050, 32000, 44100, 48000, 88200, 96000, 176400, 192000)",
        "category": "Tick Rate Calculation"
      },
      "SRC-TICK-020": {
        "line": 57,
        "text": "After calculation: LCM = 28,224,000 Hz",
        "category": "Tick Rate Calculation",
        "authoritative_value": "28224000",
        "units": "Hz"
      },
      "SRC-TICK-030": {
        "line": 63,
        "text": "Therefore, one tick = 1/28,224,000 second ≈ 35.4 nanoseconds.",
        "category": "Tick Rate Calculation",
        "authoritative_value": "35.4",
        "units": "nanoseconds"
      },
      "SRC-TICK-040": {
        "line": 65,
        "text": "This tick rate exactly divides into all supported sample rates with zero remainder.",
        "category": "Tick Rate Calculation"
      },
      "SRC-CONV-010": {
        "line": 69,
        "text": "For any sample rate, the number of ticks per sample is: ticks_per_sample = 28,224,000 ÷ sample_rate",
        "category": "Tick-to-Sample Conversion",
        "formula": "ticks_per_sample = 28224000 / sample_rate"
      },
      "SRC-CONV-020": {
        "line": 75,
        "text": "Common conversions: [table with ticks per sample for each supported sample rate]",
        "category": "Tick-to-Sample Conversion"
      },
      "SRC-CONV-030": {
        "line": 93,
        "text": "To convert sample counts to ticks: ticks = samples × (28,224,000 ÷ sample_rate)",
        "category": "Sample-to-Tick Conversion",
        "formula": "ticks = samples * (28224000 / sample_rate)"
      },
      "SRC-CONV-040": {
        "line": 99,
        "text": "Example: 5 seconds at 44.1kHz: samples = 5.0 × 44,100 = 220,500 samples; ticks = 220,500 × 640 = 141,120,000 ticks",
        "category": "Sample-to-Tick Conversion"
      },
      "SRC-CONV-050": {
        "line": 106,
        "text": "These 141,120,000 ticks exactly represent: 220,500 samples at 44.1kHz; 240,000 samples at 48kHz; 40,000 samples at 8kHz; All with zero conversion error",
        "category": "Sample-to-Tick Conversion"
      },
      "SRC-TIME-010": {
        "line": 114,
        "text": "To convert ticks to wall-clock seconds: seconds = ticks ÷ 28,224,000",
        "category": "Tick-to-Time Conversion",
        "formula": "seconds = ticks / 28224000"
      },
      "SRC-TIME-020": {
        "line": 120,
        "text": "Example: 141,120,000 ticks: seconds = 141,120,000 ÷ 28,224,000 = 5.0 seconds (exact)",
        "category": "Tick-to-Time Conversion"
      },
      "SRC-PREC-010": {
        "line": 128,
        "text": "WKMP uses 64-bit signed integers (i64) for tick values.",
        "category": "Precision and Range",
        "data_type": "i64"
      },
      "SRC-PREC-020": {
        "line": 130,
        "text": "Maximum representable time: max_ticks = 2^63 - 1 = 9,223,372,036,854,775,807 ticks; max_seconds = max_ticks ÷ 28,224,000 ≈ 326,869,873 seconds; max_years ≈ 10.36 years",
        "category": "Precision and Range"
      },
      "SRC-PREC-030": {
        "line": 138,
        "text": "This range is sufficient for all practical audio passage lengths.",
        "category": "Precision and Range"
      },
      "SRC-PREC-040": {
        "line": 140,
        "text": "Precision at tick level: ~35.4 nanoseconds per tick (far exceeds audio sampling precision).",
        "category": "Precision and Range"
      },
      "SRC-DB-010": {
        "line": 144,
        "text": "Passage timing fields are stored as INTEGER (SQLite i64) tick values:",
        "category": "Database Storage"
      },
      "SRC-DB-011": {
        "line": 146,
        "text": "start_time - Passage start boundary (ticks from file start)",
        "category": "Database Storage",
        "field_name": "start_time",
        "data_type": "INTEGER"
      },
      "SRC-DB-012": {
        "line": 147,
        "text": "end_time - Passage end boundary (ticks from file start)",
        "category": "Database Storage",
        "field_name": "end_time",
        "data_type": "INTEGER"
      },
      "SRC-DB-013": {
        "line": 148,
        "text": "fade_in_point - Fade-in completion point (ticks from file start)",
        "category": "Database Storage",
        "field_name": "fade_in_point",
        "data_type": "INTEGER"
      },
      "SRC-DB-014": {
        "line": 149,
        "text": "fade_out_point - Fade-out start point (ticks from file start)",
        "category": "Database Storage",
        "field_name": "fade_out_point",
        "data_type": "INTEGER"
      },
      "SRC-DB-015": {
        "line": 150,
        "text": "lead_in_point - Lead-in end point (ticks from file start)",
        "category": "Database Storage",
        "field_name": "lead_in_point",
        "data_type": "INTEGER"
      },
      "SRC-DB-016": {
        "line": 151,
        "text": "lead_out_point - Lead-out start point (ticks from file start)",
        "category": "Database Storage",
        "field_name": "lead_out_point",
        "data_type": "INTEGER"
      },
      "SRC-DB-020": {
        "line": 153,
        "text": "NULL values indicate use of global defaults (see [XFD-DEF-020] Crossfade Design).",
        "category": "Database Storage"
      },
      "SRC-API-010": {
        "line": 157,
        "text": "The REST API uses milliseconds (unsigned integers) for human readability:",
        "category": "API Representation"
      },
      "SRC-API-020": {
        "line": 159,
        "text": "API-to-database conversion: ticks = milliseconds × 28,224",
        "category": "API Representation",
        "formula": "ticks = milliseconds * 28224"
      },
      "SRC-API-030": {
        "line": 165,
        "text": "Database-to-API conversion: milliseconds = ticks ÷ 28,224 (rounded to nearest integer)",
        "category": "API Representation",
        "formula": "milliseconds = ticks / 28224"
      },
      "SRC-API-040": {
        "line": 171,
        "text": "Example API request: [JSON example with millisecond values]",
        "category": "API Representation"
      },
      "SRC-API-050": {
        "line": 183,
        "text": "Internal storage (after conversion): [tick value examples]",
        "category": "API Representation"
      },
      "SRC-WSR-010": {
        "line": 194,
        "text": "WKMP defines a working_sample_rate for internal mixing operations ([DBD-PARAM-020] default: 44,100 Hz).",
        "category": "Working Sample Rate"
      },
      "SRC-WSR-020": {
        "line": 196,
        "text": "At the decoder-buffer boundary, timing transitions from tick-based to sample-count-based:",
        "category": "Working Sample Rate"
      },
      "SRC-WSR-030": {
        "line": 198,
        "text": "Tick-to-sample conversion at working_sample_rate: samples = (ticks × working_sample_rate) ÷ 28,224,000",
        "category": "Working Sample Rate",
        "formula": "samples = (ticks * working_sample_rate) / 28224000"
      },
      "SRC-WSR-040": {
        "line": 204,
        "text": "For 44.1kHz working rate: samples = ticks ÷ 640",
        "category": "Working Sample Rate",
        "formula": "samples = ticks / 640"
      },
      "SRC-WSR-050": {
        "line": 210,
        "text": "All buffer positions, mixer calculations, and output operations use sample counts at working_sample_rate (not ticks).",
        "category": "Working Sample Rate"
      },
      "SRC-COEX-010": {
        "line": 214,
        "text": "WKMP uses two timing representations that coexist: 1. Tick-based timing (universal precision): Database storage, API communication, Passage boundary definitions, Crossfade calculations; 2. Sample-count timing (at working_sample_rate): Buffer management, Mixer operations, Output ring buffer positions, Real-time playback tracking",
        "category": "Timing System Coexistence"
      },
      "SRC-COEX-020": {
        "line": 228,
        "text": "Conversion between systems occurs at decoder-buffer chain initialization when passage timing points are loaded from database.",
        "category": "Timing System Coexistence"
      },
      "SRC-IMPL-010": {
        "line": 232,
        "text": "Tick arithmetic uses standard integer operations (addition, subtraction, multiplication, division).",
        "category": "Implementation Notes"
      },
      "SRC-IMPL-020": {
        "line": 234,
        "text": "All divisions by 28,224,000 result in exact integer quotients when operating on tick-aligned values.",
        "category": "Implementation Notes"
      },
      "SRC-IMPL-030": {
        "line": 236,
        "text": "Rounding is only needed when: Converting ticks to milliseconds for API responses; Converting ticks to floating-point seconds for logging/display",
        "category": "Implementation Notes"
      },
      "SRC-IMPL-040": {
        "line": 240,
        "text": "Internal calculations maintain integer precision throughout the decode-buffer-mix pipeline.",
        "category": "Implementation Notes"
      },
      "SRC-EXAM-010": {
        "line": 244,
        "text": "Two passages with different source sample rates: [example with Passage A at 44.1kHz and Passage B at 48kHz]",
        "category": "Example: Crossfade Timing"
      },
      "SRC-EXAM-020": {
        "line": 258,
        "text": "Crossfade calculation (see [XFD-IMPL-010] Crossfade Design): [formula and calculation]",
        "category": "Example: Crossfade Timing"
      },
      "SRC-EXAM-030": {
        "line": 267,
        "text": "This crossfade duration converts exactly to: 132,300 samples at 44.1kHz (Passage A); 144,000 samples at 48kHz (Passage B); Both with zero conversion error",
        "category": "Example: Crossfade Timing"
      }
    }
  },

  "authoritative_definitions": {
    "tick_rate": {
      "value": "28224000",
      "units": "Hz",
      "definition": "Least Common Multiple of all supported sample rates",
      "precision": "35.4 nanoseconds per tick",
      "requirement_id": "SRC-TICK-020",
      "source_document": "SPEC017",
      "line": 57
    },
    "tick_duration": {
      "value": "35.4",
      "units": "nanoseconds",
      "definition": "Duration of one tick (1/28,224,000 second)",
      "requirement_id": "SRC-TICK-030",
      "source_document": "SPEC017",
      "line": 63
    },
    "tick_data_type": {
      "value": "i64",
      "definition": "64-bit signed integer for tick values",
      "requirement_id": "SRC-PREC-010",
      "source_document": "SPEC017",
      "line": 128
    },
    "ms_to_tick_conversion": {
      "value": "28224",
      "units": "ticks per millisecond",
      "formula": "ticks = milliseconds * 28224",
      "requirement_id": "SRC-API-020",
      "source_document": "SPEC017",
      "line": 159
    },
    "working_sample_rate": {
      "default_value": "44100",
      "units": "Hz",
      "definition": "Sample rate that all decoded audio is converted to before buffering",
      "requirement_id": "DBD-PARAM-020",
      "source_document": "SPEC016",
      "line": 82,
      "bypass_behavior": "When audio comes out of the decoder at the working_sample_rate, the sample rate conversion process shall be bypassed"
    },
    "output_ringbuffer_size": {
      "default_value": "8192",
      "units": "samples",
      "equivalent": "185ms of audio at 44.1kHz",
      "definition": "Maximum number of stereo samples that the output ring buffer can contain",
      "requirement_id": "DBD-PARAM-030",
      "source_document": "SPEC016",
      "line": 89
    },
    "output_refill_period": {
      "default_value": "90",
      "units": "ms",
      "equivalent": "Just under half of the output ring buffer capacity",
      "definition": "Number of wall clock milliseconds between mixer checks of the output ring buffer state",
      "requirement_id": "DBD-PARAM-040",
      "source_document": "SPEC016",
      "line": 96
    },
    "maximum_decode_streams": {
      "default_value": "12",
      "units": "count",
      "definition": "Maximum number of audio decoders that will operate on passages in the queue",
      "requirement_id": "DBD-PARAM-050",
      "source_document": "SPEC016",
      "line": 104
    },
    "decode_work_period": {
      "default_value": "5000",
      "units": "ms",
      "definition": "Number of wall clock milliseconds between decode job priority evaluation",
      "requirement_id": "DBD-PARAM-060",
      "source_document": "SPEC016",
      "line": 111
    },
    "playout_ringbuffer_size": {
      "default_value": "661941",
      "units": "samples",
      "equivalent": "15.01 seconds of audio at 44.1kHz",
      "memory": "At 8 bytes per sample, with 12 playout buffers total, that's 60MB of playout buffer",
      "definition": "Number of stereo samples that the decoded/resampled audio buffers contain",
      "requirement_id": "DBD-PARAM-070",
      "source_document": "SPEC016",
      "line": 121
    },
    "playout_ringbuffer_headroom": {
      "default_value": "441",
      "units": "samples",
      "equivalent": "0.01 seconds of audio at 44.1kHz",
      "definition": "Number of stereo samples that the buffer reserves to handle additional samples that may arrive from the resampler after the decoder pauses",
      "requirement_id": "DBD-PARAM-080",
      "source_document": "SPEC016",
      "line": 129
    },
    "pause_decay_factor": {
      "default_value": "0.96875",
      "units": "ratio",
      "alternate_form": "31/32",
      "definition": "Multiplier for exponential decay of pause mode output samples",
      "purpose": "Creates an exponential decay to zero, hopefully reducing audible 'pop' from the sudden stop of going to pause mode",
      "requirement_id": "DBD-PARAM-090",
      "source_document": "SPEC016",
      "line": 136
    },
    "pause_decay_floor": {
      "default_value": "0.0001778",
      "units": "amplitude",
      "definition": "Threshold below which mixer outputs 0.0 instead of multiplying by pause_decay_factor",
      "requirement_id": "DBD-PARAM-100",
      "source_document": "SPEC016",
      "line": 143
    },
    "stereo_f32_format": {
      "value": "f32",
      "definition": "Sample format for all stages from decoder output to mixer output",
      "channels": "stereo",
      "requirement_id": "DBD-FMT-010",
      "source_document": "SPEC016",
      "line": 246,
      "note": "Preferred format for both symphonia decoder and cpal output handler"
    }
  },

  "technical_terms": {
    "tick": {
      "definition": "A fixed fraction of a second (1/28,224,000 second)",
      "purpose": "Universal time representation that can exactly express any sample boundary from any supported sample rate",
      "requirement_ids": ["SRC-SOL-010", "SRC-TICK-020", "SRC-TICK-030"],
      "source_document": "SPEC017"
    },
    "working_sample_rate": {
      "definition": "The sample rate that all decoded audio is converted to before buffering",
      "default": "44100 Hz",
      "requirement_ids": ["DBD-PARAM-020", "SRC-WSR-010"],
      "source_documents": ["SPEC016", "SPEC017"]
    },
    "decoder-buffer chain": {
      "definition": "Processing pipeline from decoder through resampler, fade handler, to buffer",
      "components": ["Decoder", "Resampler", "Fade In/Out handler", "Buffer"],
      "requirement_ids": ["DBD-OV-040", "DBD-OV-050", "DBD-OV-080"],
      "source_document": "SPEC016"
    },
    "backpressure": {
      "definition": "Flow control mechanism where full buffers pause decoders",
      "requirement_ids": ["DBD-BUF-050", "DBD-FLOW-030", "DBD-FLOW-040"],
      "source_document": "SPEC016"
    },
    "playout_ringbuffer_size": {
      "definition": "Number of stereo samples in decoded/resampled audio buffers",
      "default": "661941 samples",
      "requirement_id": "DBD-PARAM-070",
      "source_document": "SPEC016"
    },
    "playout_ringbuffer_headroom": {
      "definition": "Reserved buffer space for resampler overflow after decoder pause",
      "default": "441 samples",
      "requirement_id": "DBD-PARAM-080",
      "source_document": "SPEC016"
    },
    "output_ringbuffer_size": {
      "definition": "Maximum stereo samples in output ring buffer (mixer to cpal)",
      "default": "8192 samples",
      "requirement_id": "DBD-PARAM-030",
      "source_document": "SPEC016"
    },
    "output_refill_period": {
      "definition": "Milliseconds between mixer refills of output ring buffer",
      "default": "90 ms",
      "requirement_id": "DBD-PARAM-040",
      "source_document": "SPEC016"
    },
    "maximum_decode_streams": {
      "definition": "Maximum number of simultaneous decoder-buffer chains",
      "default": "12",
      "requirement_id": "DBD-PARAM-050",
      "source_document": "SPEC016"
    },
    "decode_work_period": {
      "definition": "Milliseconds between decode job priority evaluations",
      "default": "5000 ms",
      "requirement_id": "DBD-PARAM-060",
      "source_document": "SPEC016"
    },
    "pause_decay_factor": {
      "definition": "Exponential decay multiplier for pause mode audio",
      "default": "0.96875",
      "requirement_id": "DBD-PARAM-090",
      "source_document": "SPEC016"
    },
    "pause_decay_floor": {
      "definition": "Amplitude threshold for switching to zero output in pause mode",
      "default": "0.0001778",
      "requirement_id": "DBD-PARAM-100",
      "source_document": "SPEC016"
    },
    "now playing": {
      "definition": "First position in the queue",
      "requirement_id": "DBD-OV-060",
      "source_document": "SPEC016"
    },
    "playing next": {
      "definition": "Next position in the queue",
      "requirement_id": "DBD-OV-070",
      "source_document": "SPEC016"
    },
    "FIFO": {
      "definition": "First In First Out queue order",
      "requirement_id": "DBD-FLOW-110",
      "source_document": "SPEC016"
    },
    "LCM": {
      "definition": "Least Common Multiple",
      "usage": "Method for calculating tick rate from sample rates",
      "requirement_id": "SRC-SOL-020",
      "source_document": "SPEC017"
    },
    "sample-accurate": {
      "definition": "Timing precision to exact sample boundaries",
      "requirement_ids": ["SRC-PROB-010", "DBD-DEC-070", "DBD-DEC-080"],
      "source_documents": ["SPEC016", "SPEC017"]
    },
    "ticks_per_sample": {
      "definition": "Number of ticks representing one sample at a given sample rate",
      "formula": "28224000 / sample_rate",
      "requirement_id": "SRC-CONV-010",
      "source_document": "SPEC017"
    }
  },

  "supported_sample_rates": {
    "8000": {
      "ticks_per_sample": 3528,
      "description": "telephony, low-quality",
      "requirement_id": "SRC-RATE-011"
    },
    "11025": {
      "ticks_per_sample": 2560,
      "description": "old multimedia, 1/4 CD quality",
      "requirement_id": "SRC-RATE-012"
    },
    "16000": {
      "ticks_per_sample": 1764,
      "description": "wideband telephony",
      "requirement_id": "SRC-RATE-013"
    },
    "22050": {
      "ticks_per_sample": 1280,
      "description": "half CD quality",
      "requirement_id": "SRC-RATE-014"
    },
    "32000": {
      "ticks_per_sample": 882,
      "description": "miniDV, NTSC DV",
      "requirement_id": "SRC-RATE-015"
    },
    "44100": {
      "ticks_per_sample": 640,
      "description": "CD audio, most common",
      "requirement_id": "SRC-RATE-016"
    },
    "48000": {
      "ticks_per_sample": 588,
      "description": "DAT, DVD, professional video",
      "requirement_id": "SRC-RATE-017"
    },
    "88200": {
      "ticks_per_sample": 320,
      "description": "high-res audio, 2x CD",
      "requirement_id": "SRC-RATE-018"
    },
    "96000": {
      "ticks_per_sample": 294,
      "description": "high-res audio, 2x DAT",
      "requirement_id": "SRC-RATE-019"
    },
    "176400": {
      "ticks_per_sample": 160,
      "description": "ultra high-res, 4x CD",
      "requirement_id": "SRC-RATE-020"
    },
    "192000": {
      "ticks_per_sample": 147,
      "description": "ultra high-res, 4x DAT",
      "requirement_id": "SRC-RATE-021"
    }
  },

  "formulas": {
    "ticks_per_sample": {
      "formula": "28224000 / sample_rate",
      "requirement_id": "SRC-CONV-010",
      "source_document": "SPEC017"
    },
    "sample_to_tick": {
      "formula": "samples * (28224000 / sample_rate)",
      "requirement_id": "SRC-CONV-030",
      "source_document": "SPEC017"
    },
    "tick_to_seconds": {
      "formula": "ticks / 28224000",
      "requirement_id": "SRC-TIME-010",
      "source_document": "SPEC017"
    },
    "ms_to_tick": {
      "formula": "milliseconds * 28224",
      "requirement_id": "SRC-API-020",
      "source_document": "SPEC017"
    },
    "tick_to_ms": {
      "formula": "ticks / 28224",
      "note": "rounded to nearest integer",
      "requirement_id": "SRC-API-030",
      "source_document": "SPEC017"
    },
    "tick_to_sample_at_working_rate": {
      "formula": "(ticks * working_sample_rate) / 28224000",
      "requirement_id": "SRC-WSR-030",
      "source_document": "SPEC017"
    },
    "tick_to_sample_at_44100": {
      "formula": "ticks / 640",
      "requirement_id": "SRC-WSR-040",
      "source_document": "SPEC017"
    }
  },

  "database_fields": {
    "start_time": {
      "data_type": "INTEGER",
      "units": "ticks",
      "definition": "Passage start boundary (ticks from file start)",
      "requirement_id": "SRC-DB-011",
      "source_document": "SPEC017"
    },
    "end_time": {
      "data_type": "INTEGER",
      "units": "ticks",
      "definition": "Passage end boundary (ticks from file start)",
      "requirement_id": "SRC-DB-012",
      "source_document": "SPEC017"
    },
    "fade_in_point": {
      "data_type": "INTEGER",
      "units": "ticks",
      "definition": "Fade-in completion point (ticks from file start)",
      "requirement_id": "SRC-DB-013",
      "source_document": "SPEC017"
    },
    "fade_out_point": {
      "data_type": "INTEGER",
      "units": "ticks",
      "definition": "Fade-out start point (ticks from file start)",
      "requirement_id": "SRC-DB-014",
      "source_document": "SPEC017"
    },
    "lead_in_point": {
      "data_type": "INTEGER",
      "units": "ticks",
      "definition": "Lead-in end point (ticks from file start)",
      "requirement_id": "SRC-DB-015",
      "source_document": "SPEC017"
    },
    "lead_out_point": {
      "data_type": "INTEGER",
      "units": "ticks",
      "definition": "Lead-out start point (ticks from file start)",
      "requirement_id": "SRC-DB-016",
      "source_document": "SPEC017"
    }
  },

  "cross_references": {
    "external_requirements": {
      "REQ-CTL-040": {
        "referenced_in": "DBD-OV-030",
        "context": "volume control",
        "source_document": "SPEC016",
        "line": 21
      },
      "REQ-XFD-030": {
        "referenced_in": "DBD-OV-030",
        "context": "other amplitude modifications",
        "source_document": "SPEC016",
        "line": 21
      }
    },
    "external_entities": {
      "ENT-MP-030": {
        "referenced_in": "DBD-OV-020",
        "context": "passage definition",
        "source_document": "SPEC016",
        "line": 19
      }
    },
    "external_specs": {
      "XFD-OV-010": {
        "referenced_in": ["DBD-OV-030", "DBD-FLOW-060"],
        "context": "crossfade",
        "source_document": "SPEC016",
        "lines": [21, 161]
      },
      "XFD-DEF-020": {
        "referenced_in": "SRC-DB-020",
        "context": "global defaults for NULL values",
        "source_document": "SPEC017",
        "line": 153
      },
      "XFD-IMPL-010": {
        "referenced_in": "SRC-EXAM-020",
        "context": "crossfade calculation",
        "source_document": "SPEC017",
        "line": 258
      },
      "SSP-OUT-010": {
        "referenced_in": "DBD-OV-030",
        "context": "output system",
        "source_document": "SPEC016",
        "line": 21
      }
    },
    "related_documents": {
      "SPEC016": {
        "references": [
          "SPEC001-architecture.md",
          "SPEC013-single_stream_playback.md",
          "SPEC014-single_stream_design.md",
          "SPEC002-crossfade.md",
          "SPEC017-sample_rate_conversion.md",
          "REQ001-requirements.md",
          "REQ002-entity_definitions.md",
          "GOV001-document_hierarchy.md",
          "GOV002-requirements_enumeration.md"
        ]
      },
      "SPEC017": {
        "references": [
          "SPEC001-architecture.md",
          "SPEC016-decoder_buffer_design.md",
          "SPEC002-crossfade.md",
          "IMPL001-database_schema.md",
          "REQ001-requirements.md",
          "GOV001-document_hierarchy.md",
          "GOV002-requirements_enumeration.md"
        ]
      }
    },
    "internal_cross_references": {
      "SPEC016_to_SPEC017": [
        {
          "from": "DBD-PARAM-020",
          "to": "SRC-WSR-010",
          "context": "working_sample_rate definition"
        },
        {
          "from": "DBD-RSMP-010",
          "to": "SRC-WSR-020",
          "context": "sample rate conversion"
        }
      ],
      "SPEC017_to_SPEC016": [
        {
          "from": "SRC-WSR-010",
          "to": "DBD-PARAM-020",
          "context": "working_sample_rate reference"
        }
      ]
    }
  },

  "components": {
    "decoder": {
      "library": "symphonia",
      "function": "Decode compressed audio to PCM samples",
      "requirement_ids": ["DBD-DEC-010", "DBD-DEC-020", "DBD-DEC-030", "DBD-DEC-040", "DBD-DEC-050", "DBD-DEC-060", "DBD-DEC-070", "DBD-DEC-080"],
      "output_format": "stereo f32",
      "behavior": [
        "Starts from beginning of file even if start point is after that",
        "Handles serially in priority order",
        "One decode runs at a time",
        "Pauses when buffer is full"
      ]
    },
    "resampler": {
      "library": "rubato",
      "function": "Convert audio to working_sample_rate",
      "requirement_ids": ["DBD-RSMP-010", "DBD-RSMP-020"],
      "bypass": "When audio is already at working_sample_rate",
      "output_format": "stereo f32"
    },
    "fade_handler": {
      "function": "Apply fade curves and discard pre-start samples",
      "requirement_ids": ["DBD-FADE-010", "DBD-FADE-020", "DBD-FADE-030", "DBD-FADE-040", "DBD-FADE-050", "DBD-FADE-060"],
      "operations": [
        "Discard samples before start time",
        "Apply fade-in curve when duration > 0",
        "Pass through samples between fade-in end and fade-out start",
        "Apply fade-out curve when duration > 0",
        "Notify decoder when end time reached"
      ]
    },
    "buffer": {
      "type": "ring buffer",
      "capacity": "playout_ringbuffer_size",
      "headroom": "playout_ringbuffer_headroom",
      "requirement_ids": ["DBD-BUF-010", "DBD-BUF-020", "DBD-BUF-030", "DBD-BUF-040", "DBD-BUF-050", "DBD-BUF-060"],
      "behavior": [
        "Starts empty when assigned to passage",
        "Returns last value + empty status when empty",
        "Signals decoder to pause when nearly full",
        "Notifies queue when passage end reached"
      ]
    },
    "mixer": {
      "function": "Combine buffers, apply volume, output to ring buffer",
      "requirement_ids": ["DBD-MIX-010", "DBD-MIX-020", "DBD-MIX-030", "DBD-MIX-040", "DBD-MIX-050", "DBD-MIX-051", "DBD-MIX-052"],
      "modes": ["playing", "paused"],
      "operations": {
        "playing": [
          "Take samples from now playing buffer",
          "Add playing next samples during crossfade",
          "Multiply by master volume",
          "Apply fade-in curve after pause"
        ],
        "paused": [
          "Start at last playing sample values",
          "Multiply by pause_decay_factor each sample",
          "Output zero when below pause_decay_floor"
        ]
      }
    },
    "output": {
      "library": "cpal",
      "buffer": "output ring buffer",
      "buffer_size": "output_ringbuffer_size",
      "refill_period": "output_refill_period",
      "requirement_ids": ["DBD-OUT-010"],
      "format": "stereo f32"
    }
  },

  "timing_systems": {
    "tick_based": {
      "used_for": [
        "Database storage",
        "API communication",
        "Passage boundary definitions",
        "Crossfade calculations"
      ],
      "data_type": "i64",
      "precision": "35.4 nanoseconds",
      "requirement_id": "SRC-COEX-010",
      "source_document": "SPEC017"
    },
    "sample_count_based": {
      "used_for": [
        "Buffer management",
        "Mixer operations",
        "Output ring buffer positions",
        "Real-time playback tracking"
      ],
      "sample_rate": "working_sample_rate (default 44100 Hz)",
      "requirement_id": "SRC-COEX-010",
      "source_document": "SPEC017"
    },
    "conversion_point": {
      "location": "decoder-buffer chain initialization",
      "requirement_id": "SRC-COEX-020",
      "source_document": "SPEC017"
    }
  },

  "issues_and_ambiguities": []
}
