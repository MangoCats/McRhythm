{
  "scan_date": "2025-10-19",
  "module": "wkmp-ap",
  "description": "WKMP Audio Player - Core playback engine with sample-accurate crossfading",
  "total_rust_files": 39,
  "total_lines_of_code": 13719,
  "test_lines_of_code": 3325,
  "benchmark_lines_of_code": 237,
  "architecture": "Single-stream audio pipeline using symphonia (decode) + rubato (resample) + cpal (output)",
  "threading_model": "Hybrid: Tokio async runtime + dedicated std::thread pool (2 decoder threads) + dedicated audio callback thread",
  "external_dependencies": [
    "symphonia (0.5) - Audio decoding (MP3, FLAC, AAC, Vorbis)",
    "symphonia-adapter-libopus (0.2.3) - Opus codec support via libopus FFI",
    "rubato (0.15) - Sample rate conversion",
    "cpal (0.15) - Audio device output",
    "ringbuf (0.4) - Lock-free ring buffer for audio callback",
    "tokio - Async runtime",
    "axum - HTTP REST API server",
    "sqlx - SQLite database access",
    "uuid - UUID generation",
    "serde/serde_json - Serialization"
  ],
  "modules": [
    {
      "path": "wkmp-ap/src/main.rs",
      "module_name": "main",
      "responsibility": "Application entry point - CLI parsing, database initialization, engine startup, HTTP server",
      "key_types": ["Args"],
      "external_dependencies": ["tokio", "clap", "tracing"],
      "internal_dependencies": ["config", "playback::engine", "state", "api::server", "db::init"],
      "lines_of_code": 150,
      "has_tests": false
    },
    {
      "path": "wkmp-ap/src/lib.rs",
      "module_name": "lib",
      "responsibility": "Library root - module exports and public API surface",
      "key_types": ["Error", "Result", "SharedState"],
      "external_dependencies": [],
      "internal_dependencies": ["api", "audio", "config", "db", "error", "playback", "state"],
      "lines_of_code": 23,
      "has_tests": false
    },
    {
      "path": "wkmp-ap/src/error.rs",
      "module_name": "error",
      "responsibility": "Error types and result type aliases for the audio player",
      "key_types": ["Error", "Result"],
      "external_dependencies": ["thiserror"],
      "internal_dependencies": [],
      "lines_of_code": 72,
      "has_tests": false
    },
    {
      "path": "wkmp-ap/src/config.rs",
      "module_name": "config",
      "responsibility": "Configuration management - TOML loading and validation",
      "key_types": ["Config"],
      "external_dependencies": ["toml", "serde"],
      "internal_dependencies": [],
      "lines_of_code": 124,
      "has_tests": false
    },
    {
      "path": "wkmp-ap/src/state.rs",
      "module_name": "state",
      "responsibility": "Shared state management - playback state, current passage, volume, event broadcasting",
      "key_types": ["SharedState", "CurrentPassage", "PlaybackState"],
      "external_dependencies": ["tokio::sync", "uuid"],
      "internal_dependencies": ["wkmp_common::events"],
      "lines_of_code": 265,
      "has_tests": false
    },
    {
      "path": "wkmp-ap/src/playback/mod.rs",
      "module_name": "playback",
      "responsibility": "Playback module root - exports core playback components",
      "key_types": [],
      "external_dependencies": [],
      "internal_dependencies": ["buffer_manager", "decoder_pool", "engine", "events", "pipeline", "queue_manager", "ring_buffer", "song_timeline", "types"],
      "lines_of_code": 21,
      "has_tests": false
    },
    {
      "path": "wkmp-ap/src/playback/engine.rs",
      "module_name": "playback::engine",
      "responsibility": "Main playback engine orchestration - coordinates queue, buffer manager, decoder pool, mixer, and audio output. Implements play/pause/skip/seek control.",
      "key_types": ["PlaybackEngine", "PlaybackPosition"],
      "external_dependencies": ["tokio", "uuid", "sqlx"],
      "internal_dependencies": ["audio::output", "audio::types", "db", "playback::buffer_manager", "playback::decoder_pool", "playback::queue_manager", "playback::pipeline::mixer", "playback::ring_buffer", "state"],
      "lines_of_code": 2120,
      "has_tests": true,
      "traceability": ["SSD-FLOW-010", "SSD-ENG-020", "SSD-ENG-025", "SSD-ENG-026", "REV002", "ISSUE-1", "ISSUE-2", "ISSUE-6", "ISSUE-7", "ISSUE-8"],
      "critical_notes": [
        "Main orchestrator - spawns 3 async tasks: playback_loop, position_event_handler, buffer_event_handler",
        "Uses lock-free ring buffer for audio callback (ISSUE-1 fix)",
        "Event-driven position tracking (REV002)",
        "Persists state on pause/shutdown (ISSUE-2)",
        "Manages decoder pool (2 threads), buffer manager, mixer state",
        "Handles crossfade triggering based on timing points"
      ]
    },
    {
      "path": "wkmp-ap/src/playback/buffer_manager.rs",
      "module_name": "playback::buffer_manager",
      "responsibility": "Buffer lifecycle management - tracks decode progress, buffer states (Decoding/Ready/Playing/Exhausted), and provides buffer access to mixer",
      "key_types": ["BufferManager", "ManagedBuffer"],
      "external_dependencies": ["tokio::sync", "uuid"],
      "internal_dependencies": ["audio::types", "playback::types"],
      "lines_of_code": 1458,
      "has_tests": true,
      "traceability": ["SSD-BUF-010", "SSD-FBUF-010", "SSD-PBUF-010", "SSD-BUF-020", "PERF-POLL-010"],
      "critical_notes": [
        "Manages HashMap of PassageBuffer objects wrapped in Arc<RwLock>",
        "Event-driven buffer readiness notification (PERF-POLL-010)",
        "Tracks decode progress 0-100%",
        "Implements full decode (current/next) vs partial decode (queued 15s) strategy",
        "Prevents duplicate decode requests via is_managed() check"
      ]
    },
    {
      "path": "wkmp-ap/src/playback/decoder_pool.rs",
      "module_name": "playback::decoder_pool",
      "responsibility": "Multi-threaded decoder pool with priority queue - 2 worker threads decode audio files in parallel with priority-based scheduling",
      "key_types": ["DecoderPool", "DecodeRequest", "SharedPoolState", "DecodePriority"],
      "external_dependencies": ["std::thread", "uuid"],
      "internal_dependencies": ["audio::decoder", "audio::resampler", "audio::types", "playback::buffer_manager"],
      "lines_of_code": 515,
      "has_tests": true,
      "traceability": ["SSD-DEC-030", "SSD-DEC-032", "SSD-DEC-033", "SSD-PBUF-028"],
      "critical_notes": [
        "Fixed 2-thread pool (configured for Raspberry Pi Zero2W)",
        "BinaryHeap for priority queue (Immediate > Next > Prefetch)",
        "Uses std::thread (not tokio) with captured runtime handle",
        "Incremental buffer filling - appends 1-second chunks",
        "Resample to 44.1kHz, convert to stereo",
        "5-second shutdown timeout"
      ]
    },
    {
      "path": "wkmp-ap/src/playback/queue_manager.rs",
      "module_name": "playback::queue_manager",
      "responsibility": "In-memory queue state - manages current/next/queued passages with database synchronization",
      "key_types": ["QueueManager", "QueueEntry"],
      "external_dependencies": ["uuid", "sqlx"],
      "internal_dependencies": ["db::queue"],
      "lines_of_code": 443,
      "has_tests": true,
      "traceability": ["SSD-ENG-020"],
      "critical_notes": [
        "Three-slot structure: current (playing), next (preloaded), queued (Vec)",
        "advance() moves next->current, queued[0]->next",
        "Loads from database on startup",
        "Database sync on operations (enqueue, reorder, remove)"
      ]
    },
    {
      "path": "wkmp-ap/src/playback/ring_buffer.rs",
      "module_name": "playback::ring_buffer",
      "responsibility": "Lock-free ring buffer for audio callback - producer/consumer split with underrun detection",
      "key_types": ["AudioRingBuffer", "RingBufferProducer", "RingBufferConsumer"],
      "external_dependencies": ["ringbuf"],
      "internal_dependencies": ["audio::types"],
      "lines_of_code": 470,
      "has_tests": true,
      "traceability": ["ISSUE-1", "SSD-RBUF-014"],
      "critical_notes": [
        "Wraps ringbuf crate's HeapRb for AudioFrame",
        "Default 2048 frames (~46ms @ 44.1kHz)",
        "Grace period for underrun detection (configurable, default 2000ms)",
        "Context-aware logging (TRACE when expected, WARN when unexpected)",
        "Split into producer (mixer thread) and consumer (audio callback)"
      ]
    },
    {
      "path": "wkmp-ap/src/playback/song_timeline.rs",
      "module_name": "playback::song_timeline",
      "responsibility": "Song boundary tracking within passages - detects when playback crosses into different songs",
      "key_types": ["SongTimeline", "SongBoundary"],
      "external_dependencies": ["uuid"],
      "internal_dependencies": [],
      "lines_of_code": 453,
      "has_tests": true,
      "traceability": ["REV002", "ARCH-SNGC-030"],
      "critical_notes": [
        "Loaded from passage_songs table on passage start",
        "Tracks song boundaries by position_ms",
        "check_boundary() called from position_event_handler",
        "Emits CurrentSongChanged events"
      ]
    },
    {
      "path": "wkmp-ap/src/playback/events.rs",
      "module_name": "playback::events",
      "responsibility": "Internal playback events - position updates and state changes from mixer to engine",
      "key_types": ["PlaybackEvent"],
      "external_dependencies": ["uuid"],
      "internal_dependencies": [],
      "lines_of_code": 119,
      "has_tests": false,
      "traceability": ["REV002"],
      "critical_notes": [
        "PositionUpdate event: queue_entry_id + position_ms",
        "StateChanged event (future use)",
        "Sent via mpsc::unbounded_channel from mixer to engine"
      ]
    },
    {
      "path": "wkmp-ap/src/playback/types.rs",
      "module_name": "playback::types",
      "responsibility": "Type definitions for playback module - decode priority, buffer events",
      "key_types": ["DecodePriority", "BufferEvent"],
      "external_dependencies": ["uuid"],
      "internal_dependencies": [],
      "lines_of_code": 33,
      "has_tests": false
    },
    {
      "path": "wkmp-ap/src/playback/pipeline/mod.rs",
      "module_name": "playback::pipeline",
      "responsibility": "Pipeline module root - exports mixer and timing components",
      "key_types": [],
      "external_dependencies": [],
      "internal_dependencies": ["mixer", "timing"],
      "lines_of_code": 11,
      "has_tests": false
    },
    {
      "path": "wkmp-ap/src/playback/pipeline/mixer.rs",
      "module_name": "playback::pipeline::mixer",
      "responsibility": "Crossfade mixer state machine - sample-accurate mixing of passages with fade curves, handles single passage, crossfade, underrun, pause/resume states",
      "key_types": ["CrossfadeMixer", "MixerState", "UnderrunState", "PauseState", "ResumeState"],
      "external_dependencies": ["uuid", "wkmp_common::FadeCurve"],
      "internal_dependencies": ["audio::types", "playback::buffer_manager", "playback::events"],
      "lines_of_code": 1664,
      "has_tests": true,
      "traceability": ["SSD-MIX-010", "SSD-MIX-020", "SSD-MIX-030", "SSD-MIX-040", "SSD-MIX-050", "SSD-MIX-060", "REV002", "XFD-PAUS-010", "XFD-PAUS-020"],
      "critical_notes": [
        "State machine: None -> SinglePassage -> Crossfading -> None",
        "get_next_frame() is main mixing function called by producer thread",
        "Applies fade curves (Linear, Exponential, Logarithmic, SCurve, Cosine)",
        "Handles underrun detection and flatline output",
        "Pause/resume with configurable fade-in",
        "Emits PositionUpdate events every N frames (configurable)",
        "Sample-accurate position tracking"
      ]
    },
    {
      "path": "wkmp-ap/src/playback/pipeline/timing.rs",
      "module_name": "playback::pipeline::timing",
      "responsibility": "Fade timing calculations - converts milliseconds to frames, validates timing constraints",
      "key_types": ["FadeTiming"],
      "external_dependencies": [],
      "internal_dependencies": [],
      "lines_of_code": 408,
      "has_tests": true,
      "traceability": ["XFD-IMPL-070"],
      "critical_notes": [
        "Validates fade timing constraints",
        "Converts ms -> frames for fade calculations",
        "Used by mixer during crossfade initiation"
      ]
    },
    {
      "path": "wkmp-ap/src/audio/mod.rs",
      "module_name": "audio",
      "responsibility": "Audio module root - exports decoder, output, resampler, types",
      "key_types": [],
      "external_dependencies": [],
      "internal_dependencies": ["decoder", "output", "resampler", "types"],
      "lines_of_code": 24,
      "has_tests": false
    },
    {
      "path": "wkmp-ap/src/audio/decoder.rs",
      "module_name": "audio::decoder",
      "responsibility": "Audio decoding via symphonia - supports MP3, FLAC, AAC, Vorbis, Opus (via libopus FFI). Decode-and-skip approach for sample-accurate positioning.",
      "key_types": ["SimpleDecoder"],
      "external_dependencies": ["symphonia", "symphonia-adapter-libopus"],
      "internal_dependencies": ["error"],
      "lines_of_code": 600,
      "has_tests": true,
      "traceability": ["SSD-DEC-010", "SSD-DEC-013", "REQ-TECH-022A"],
      "critical_notes": [
        "Always decodes from file start (never seeks in compressed domain)",
        "Skips samples until start_time_ms",
        "Decodes until end_time_ms or file end",
        "Registers Opus decoder via symphonia-adapter-libopus",
        "Returns Vec<f32> samples, sample_rate, channels",
        "decode_file() decodes entire file, decode_passage() decodes specified range"
      ]
    },
    {
      "path": "wkmp-ap/src/audio/resampler.rs",
      "module_name": "audio::resampler",
      "responsibility": "Sample rate conversion via rubato - resamples all audio to 44.1kHz standard rate",
      "key_types": ["Resampler"],
      "external_dependencies": ["rubato"],
      "internal_dependencies": ["error"],
      "lines_of_code": 253,
      "has_tests": true,
      "traceability": ["SSD-DEC-016", "SSD-FBUF-020"],
      "critical_notes": [
        "Uses rubato's FftFixedInOut resampler",
        "Processes audio in chunks (10000 samples)",
        "Handles channel interleaving/deinterleaving",
        "All audio normalized to 44.1kHz before buffering"
      ]
    },
    {
      "path": "wkmp-ap/src/audio/output.rs",
      "module_name": "audio::output",
      "responsibility": "Audio device management via cpal - initializes audio device, starts playback stream with callback, handles device fallback and volume control",
      "key_types": ["AudioOutput"],
      "external_dependencies": ["cpal"],
      "internal_dependencies": ["audio::types", "error"],
      "lines_of_code": 618,
      "has_tests": true,
      "traceability": ["SSD-OUT-010", "SSD-OUT-011", "SSD-OUT-012", "ARCH-VOL-020", "ISSUE-5"],
      "critical_notes": [
        "Uses cpal for cross-platform audio output",
        "Callback-based playback (runs on dedicated audio thread)",
        "Automatic device fallback on error",
        "Shared volume Arc for synchronized volume control",
        "list_devices() for device enumeration",
        "Audio callback must be lock-free (reads from ring buffer)"
      ]
    },
    {
      "path": "wkmp-ap/src/audio/types.rs",
      "module_name": "audio::types",
      "responsibility": "Core audio data structures - AudioFrame (stereo sample), PassageBuffer (decoded PCM storage), BufferStatus (state machine)",
      "key_types": ["AudioFrame", "PassageBuffer", "BufferStatus"],
      "external_dependencies": [],
      "internal_dependencies": [],
      "lines_of_code": 596,
      "has_tests": true,
      "traceability": ["SSD-FBUF-010"],
      "critical_notes": [
        "AudioFrame: Stereo f32 sample (-1.0 to 1.0)",
        "PassageBuffer: Vec<AudioFrame> + metadata (sample_rate, duration_ms, sample_count)",
        "append_samples() for incremental buffer filling",
        "BufferStatus enum: Decoding/Ready/Playing/Exhausted",
        "duration_ms() calculates buffer duration",
        "get_sample() for safe sample access with bounds checking"
      ]
    },
    {
      "path": "wkmp-ap/src/api/mod.rs",
      "module_name": "api",
      "responsibility": "API module root - exports handlers, server, SSE components",
      "key_types": [],
      "external_dependencies": [],
      "internal_dependencies": ["handlers", "server", "sse"],
      "lines_of_code": 9,
      "has_tests": false
    },
    {
      "path": "wkmp-ap/src/api/server.rs",
      "module_name": "api::server",
      "responsibility": "HTTP server setup - configures Axum router with routes and middleware",
      "key_types": [],
      "external_dependencies": ["axum", "tower", "tower-http"],
      "internal_dependencies": ["api::handlers", "api::sse", "state"],
      "lines_of_code": 103,
      "has_tests": false,
      "traceability": ["SPEC007"],
      "critical_notes": [
        "Axum router with CORS middleware",
        "Serves static files from /static",
        "Routes: /playback/*, /audio/*, /events (SSE)",
        "Shared state injection via Extension"
      ]
    },
    {
      "path": "wkmp-ap/src/api/handlers.rs",
      "module_name": "api::handlers",
      "responsibility": "HTTP API endpoint handlers - play, pause, skip, seek, volume, queue management, buffer status, device management",
      "key_types": [],
      "external_dependencies": ["axum", "serde", "uuid"],
      "internal_dependencies": ["playback::engine", "state", "db"],
      "lines_of_code": 852,
      "has_tests": true,
      "traceability": ["SPEC007"],
      "critical_notes": [
        "POST /playback/play - resume playback",
        "POST /playback/pause - pause playback",
        "POST /playback/skip - skip to next passage",
        "POST /playback/seek - seek within passage",
        "PUT /playback/volume - set volume (updates shared Arc)",
        "POST /playback/queue/clear - clear queue",
        "POST /playback/enqueue - add passage to queue",
        "GET /playback/buffer_status - buffer states",
        "GET /audio/devices - list audio devices"
      ]
    },
    {
      "path": "wkmp-ap/src/api/sse.rs",
      "module_name": "api::sse",
      "responsibility": "Server-Sent Events endpoint - streams WkmpEvent messages to connected clients",
      "key_types": [],
      "external_dependencies": ["axum", "futures", "tokio-stream"],
      "internal_dependencies": ["state"],
      "lines_of_code": 80,
      "has_tests": false,
      "traceability": ["SPEC007"],
      "critical_notes": [
        "GET /events - SSE endpoint",
        "Subscribes to SharedState event broadcast",
        "Converts WkmpEvent to JSON SSE messages",
        "Handles client disconnection gracefully"
      ]
    },
    {
      "path": "wkmp-ap/src/db/mod.rs",
      "module_name": "db",
      "responsibility": "Database module root - exports init, passages, passage_songs, queue, settings",
      "key_types": [],
      "external_dependencies": [],
      "internal_dependencies": ["init", "passages", "passage_songs", "queue", "settings"],
      "lines_of_code": 11,
      "has_tests": false
    },
    {
      "path": "wkmp-ap/src/db/init.rs",
      "module_name": "db::init",
      "responsibility": "Database initialization - creates audio player specific tables (queue, settings) if they don't exist",
      "key_types": [],
      "external_dependencies": ["sqlx"],
      "internal_dependencies": ["error"],
      "lines_of_code": 263,
      "has_tests": false,
      "traceability": ["IMPL001"],
      "critical_notes": [
        "Creates queue table if not exists",
        "Creates settings table if not exists",
        "Called after wkmp_common database initialization",
        "Does not run migrations (handled by root migrations/)"
      ]
    },
    {
      "path": "wkmp-ap/src/db/passages.rs",
      "module_name": "db::passages",
      "responsibility": "Passage database access - queries passages table, creates ephemeral passages, validates timing",
      "key_types": ["PassageWithTiming"],
      "external_dependencies": ["sqlx", "uuid"],
      "internal_dependencies": ["error", "wkmp_common::FadeCurve"],
      "lines_of_code": 424,
      "has_tests": true,
      "traceability": ["IMPL001", "XFD-IMPL-040"],
      "critical_notes": [
        "get_passage_with_timing() loads passage from DB",
        "create_ephemeral_passage() creates temporary passage for arbitrary files",
        "validate_passage_timing() enforces timing constraints",
        "PassageWithTiming struct with all fade points and curves"
      ]
    },
    {
      "path": "wkmp-ap/src/db/passage_songs.rs",
      "module_name": "db::passage_songs",
      "responsibility": "Passage-song relationship access - loads song timeline for passages (song boundaries within audio files)",
      "key_types": [],
      "external_dependencies": ["sqlx", "uuid"],
      "internal_dependencies": ["error", "playback::song_timeline"],
      "lines_of_code": 397,
      "has_tests": true,
      "traceability": ["REV002"],
      "critical_notes": [
        "load_song_timeline() queries passage_songs table",
        "Returns SongTimeline with song boundaries",
        "Used for CurrentSongChanged event emission"
      ]
    },
    {
      "path": "wkmp-ap/src/db/queue.rs",
      "module_name": "db::queue",
      "responsibility": "Queue database operations - CRUD operations on queue table, queue reordering",
      "key_types": ["QueueEntryRow"],
      "external_dependencies": ["sqlx", "uuid"],
      "internal_dependencies": ["error"],
      "lines_of_code": 459,
      "has_tests": true,
      "traceability": ["IMPL001", "ISSUE-6"],
      "critical_notes": [
        "enqueue() adds passage to queue with timing",
        "get_queue() loads all queue entries ordered by play_order",
        "remove_from_queue() deletes entry",
        "reorder_queue() changes play_order",
        "clear_queue() deletes all entries"
      ]
    },
    {
      "path": "wkmp-ap/src/db/settings.rs",
      "module_name": "db::settings",
      "responsibility": "Settings database access - typed accessors for all audio player settings (volume, buffer thresholds, fade curves, intervals)",
      "key_types": [],
      "external_dependencies": ["sqlx", "uuid"],
      "internal_dependencies": ["error"],
      "lines_of_code": 708,
      "has_tests": true,
      "traceability": ["IMPL001", "ARCH-CFG-020"],
      "critical_notes": [
        "get_volume() / set_volume() - master volume 0.0-1.0",
        "load_minimum_buffer_threshold() - startup buffer requirement",
        "load_position_event_interval() - position event frequency",
        "load_resume_fade_in_duration/curve() - pause resume settings",
        "load_mixer_thread_config() - mixer thread tuning",
        "save_playback_position() / save_last_passage_id() - state persistence",
        "Generic set_setting() / get_setting() for any key-value pair"
      ]
    }
  ],
  "critical_components": {
    "engine": "wkmp-ap/src/playback/engine.rs",
    "decoder_pool": "wkmp-ap/src/playback/decoder_pool.rs",
    "decoder": "wkmp-ap/src/audio/decoder.rs",
    "buffer_manager": "wkmp-ap/src/playback/buffer_manager.rs",
    "mixer": "wkmp-ap/src/playback/pipeline/mixer.rs",
    "ring_buffer": "wkmp-ap/src/playback/ring_buffer.rs",
    "output": "wkmp-ap/src/audio/output.rs",
    "queue_manager": "wkmp-ap/src/playback/queue_manager.rs",
    "resampler": "wkmp-ap/src/audio/resampler.rs"
  },
  "threading_architecture": {
    "main_async_runtime": {
      "type": "tokio",
      "tasks": [
        "HTTP API server (Axum)",
        "playback_loop (100ms tick)",
        "position_event_handler (event-driven)",
        "buffer_event_handler (event-driven)",
        "mixer thread (graduated filling strategy with configurable intervals)"
      ]
    },
    "decoder_threads": {
      "type": "std::thread",
      "count": 2,
      "notes": "Fixed thread pool with BinaryHeap priority queue. Workers block on condvar when idle."
    },
    "audio_callback_thread": {
      "type": "cpal::Stream",
      "notes": "Dedicated real-time audio thread. Lock-free operation via ring buffer consumer. Must never block."
    }
  },
  "data_flow": {
    "decode_path": "File → SimpleDecoder (symphonia) → Resampler (rubato) → PassageBuffer → BufferManager",
    "playback_path": "BufferManager → CrossfadeMixer → RingBufferProducer → RingBufferConsumer → AudioOutput (cpal callback)",
    "control_path": "HTTP API handlers → PlaybackEngine methods → Mixer state changes → SharedState events → SSE broadcast"
  },
  "state_machines": {
    "mixer_state": ["None", "SinglePassage", "Crossfading", "Underrun", "Paused", "Resuming"],
    "buffer_status": ["Decoding", "Ready", "Playing", "Exhausted"],
    "playback_state": ["Playing", "Paused", "Stopped"],
    "queue_structure": "Current (playing) → Next (prefetched) → Queued[] (first 3 prefetch partial)"
  },
  "dependency_graph_mermaid": "graph TD\n    A[main.rs] --> B[PlaybackEngine]\n    B --> C[BufferManager]\n    B --> D[DecoderPool]\n    B --> E[QueueManager]\n    B --> F[CrossfadeMixer]\n    B --> G[AudioRingBuffer]\n    B --> H[AudioOutput]\n    B --> I[SharedState]\n    B --> J[Database]\n    \n    D --> K[SimpleDecoder]\n    D --> L[Resampler]\n    D --> C\n    \n    F --> C\n    F --> M[PassageBuffer]\n    F --> N[PlaybackEvent]\n    \n    G --> O[RingBufferProducer]\n    G --> P[RingBufferConsumer]\n    \n    O --> F\n    P --> H\n    \n    H --> Q[cpal]\n    K --> R[symphonia]\n    L --> S[rubato]\n    \n    T[API Handlers] --> B\n    T --> I\n    U[SSE Endpoint] --> I\n    \n    E --> J\n    V[Settings] --> J\n    W[Passages] --> J\n    \n    style B fill:#f96,stroke:#333,stroke-width:4px\n    style F fill:#9cf,stroke:#333,stroke-width:4px\n    style D fill:#fc9,stroke:#333,stroke-width:4px\n    style H fill:#9f9,stroke:#333,stroke-width:4px\n    style G fill:#f9c,stroke:#333,stroke-width:4px",
  "key_observations": [
    "Hybrid threading: Tokio for orchestration + std::thread pool for CPU-bound decoding + dedicated audio callback thread",
    "Lock-free audio path: Ring buffer eliminates locks in real-time audio callback (ISSUE-1 fix)",
    "Event-driven architecture: Position tracking, buffer readiness, and SSE broadcasting all event-driven (REV002, PERF-POLL-010)",
    "Incremental decode: Decoder appends 1-second chunks enabling partial buffer playback (SSD-PBUF-028)",
    "State machine complexity: Mixer has 6 states, buffers have 4 states, queue has 3-tier structure",
    "Sample-accurate positioning: Decode-and-skip approach, no compressed domain seeking",
    "Database-first config: All settings in SQLite, loaded on startup and operations",
    "Extensive traceability: Code comments reference 50+ requirement IDs from SPEC/IMPL docs",
    "Production-ready error handling: Device fallback, underrun recovery, graceful shutdown with persistence",
    "Heavy use of Arc<RwLock> for shared state between async tasks and threads"
  ],
  "complexity_metrics": {
    "largest_module": "playback::engine (2120 LOC)",
    "most_complex_component": "CrossfadeMixer (1664 LOC, 6-state machine)",
    "total_public_api_endpoints": 12,
    "total_database_tables_accessed": 5,
    "total_async_tasks_spawned": 6,
    "total_thread_pool_threads": 2,
    "total_event_types": 3
  },
  "test_coverage": {
    "unit_tests": "Most modules have unit tests",
    "integration_tests": 5,
    "test_files": [
      "tests/crossfade_test.rs",
      "tests/crossfade_integration_tests.rs",
      "tests/playback_engine_integration.rs",
      "tests/audible_crossfade_test.rs",
      "tests/audio_format_tests.rs",
      "tests/audio_subsystem_test.rs",
      "tests/api_integration.rs"
    ],
    "benchmarks": ["benches/crossfade_bench.rs"]
  }
}
